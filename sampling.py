'''
This script is intended to generate a sample of possible configurations using the specified parameters
Output: Excel file compatible with SOLIDWORKS
'''

# in: an n length list of parameters with their upper and lower bounds
# Parameters must be named EXACTLY as they are in the SOLIDWORKS file
# out: excel file in the format of SOLIDWORKS Design Table

# TODO: Import tkinter to allow for file selection dialog
import numpy as np
import pandas as pd
from scipy.stats.qmc import LatinHypercube

class Sampler():

    def __init__(self):
        # initialize variables
        self.bounds = {}
        self.param_names = []
        # 2darray of configurations generated by LHS
        self.samples = None
        self.config_names = []


    def import_params(self, input_file):
        # reads excel file, skipping first line
        df = pd.read_excel(input_file, header=1)
        param_dict = {}
        # assumes parameter names start in Column B
        self.param_names = df.columns[1::]
        print(f"Imported {input_file} with {len(self.param_names)} parameters")
        for param_name in self.param_names:
            lower = np.float64(df[param_name][0])
            upper = np.float64(df[param_name][1])
            # append parameter: (lower, upper) to param dictionary
            param_dict[param_name] = (lower, upper)

        self.bounds = param_dict


    def lhs(self, num_samples=10, num_decimals=2):
        """
        Generate Latin Hypercube samples within each parameter's bounds.
        Returns an ndarray with one column per parameter.
        """
        num_params = len(self.bounds)
        # extract upper and lower bounds
        lower = []
        upper = []
        for bound in self.bounds.values():
            # multiply values by 10^NUM_DECIMALS so all sig figs are before the decimal place
            lower.append(int(bound[0] * 10 ** num_decimals))
            upper.append(int(bound[1] * 10 ** num_decimals))

        # create LHS object with our parameters
        lhs = LatinHypercube(num_params)
        # LHS pulls integers only which is why all sig figs needed to be before the decimal
        # pull samples then divide to return to original scale
        print(f"Generating {num_samples} LHS integers...")
        self.samples = lhs.integers(l_bounds=lower, u_bounds=upper, n=num_samples) / 10 ** num_decimals

        # now that the configurations/samples have been generated, make names for each case
        self.create_config_names()


    def create_config_names(self):
        """Return a list of descriptive configuration names"""
        try:
            # Name each config after the value of its first parameter
            parameter = self.param_names[0].strip().replace(' ', '_').lower()
            filenames = []
            for i, row in enumerate(self.samples):
                # replace decimal values with underscores
                param_value = str(row[0]).replace('.', '_')
                filenames.append(f"C{i+1}_{parameter}_{param_value}")
        except:
            # if something goes wrong just name them numerically
            filenames = [f"C{str(i+1)}" for i in range(len(self.samples))]

        self.config_names = filenames

    def export_to_excel(self, project_name : str):
        """
        Takes the numpy array of samples from LHS and exports to Excel in a format that SolidWorks can import directly.
        """
        # Remove whitespace from project name
        project_file_name = project_name.strip().replace(' ', '_').lower()

        filename = f"{project_file_name}_design_table.xlsx"

        # IMPORTANT: Modify parameter names to start with $VALUE@ and end with @EQUATIONS so SW recognizes that they are global variables
        # TODO: Possibly remove this feature if we want to drive dimensions that are not global variables
        # since this considers every parameter as a global variable

        global_variables = [f"$VALUE@{parameter}@EQUATIONS" for parameter in self.param_names]
        # make sample/config data into dataframe
        df = pd.DataFrame(self.samples, columns=global_variables)

        # insert first column for config names
        df.insert(0, "", self.config_names)        

        df.to_excel(filename, index=False, startrow=1)
        print(f"Saved results to {filename}")


def main():
    
    NUM_SAMPLES = 10  # Number of configurations to generate
    NUM_DECIMALS = 2 # only considers samples up to `NUM_DECIMALS` decimals
    INPUT_FILE = 'param_template.xlsx'
    PROJECT_NAME = "Flat Missile"

    sampler = Sampler()
    sampler.import_params(INPUT_FILE)
    sampler.lhs(NUM_SAMPLES, NUM_DECIMALS)
    sampler.export_to_excel(PROJECT_NAME)

if __name__ == "__main__":
    main()
