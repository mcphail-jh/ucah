'''
This script is intended to generate an LHS sample of possible configurations using the specified parameters
Output: Excel file compatible with SOLIDWORKS
'''

# in: an n length list of parameters with their upper and lower bounds
# Parameters must be named EXACTLY as they are in the SOLIDWORKS file
# out: excel file in the format of SOLIDWORKS Design Table

# TODO: Import tkinter to allow for file selection dialog
import os
import hashlib
import numpy as np
import pandas as pd
from scipy.stats.qmc import LatinHypercube

class Sampler():

    def __init__(self):
        # initialize variables
        self.bounds = {}
        self.param_names = []
        # 2darray of configurations generated by LHS
        self.sampless = None
        self.sample_names = []


    def import_params(self, input_file):
        # reads excel file, skipping first line
        df = pd.read_excel(input_file, header=1)
        param_dict = {}
        # assumes parameter names start in Column B
        self.param_names = df.columns[1::]
        print(f"Imported {input_file} with {len(self.param_names)} parameters")
        for param_name in self.param_names:
            lower = np.float64(df[param_name][0])
            upper = np.float64(df[param_name][1])
            # append parameter: (lower, upper) to param dictionary
            param_dict[param_name] = (lower, upper)

        self.bounds = param_dict


    def lhs(self, num_samples=10, num_decimals=2):
        """
        Generate Latin Hypercube samples within each parameter's bounds.
        Returns a numpy 2d array with one column per parameter.
        """
        num_params = len(self.bounds)
        # extract upper and lower bounds
        lower = []
        upper = []
        for bound in self.bounds.values():
            # multiply values by 10^NUM_DECIMALS so all sig figs are before the decimal place
            lower.append(int(bound[0] * 10 ** num_decimals))
            upper.append(int(bound[1] * 10 ** num_decimals))

        # create LHS object with our parameters
        lhs = LatinHypercube(num_params)
        # LHS pulls integers only which is why all sig figs needed to be before the decimal
        # pull samples then divide to return to original scale
        print(f"Generating {num_samples} LHS integers...")
        try:
            self.samples = lhs.integers(l_bounds=lower, u_bounds=upper, n=num_samples) / 10 ** num_decimals
        except ValueError:
            print("Error reading parameter data. Ensure all parameters are filled in with upper and lower bounds!")

        # now that the configurations/samples have been generated, make names for each case
        self.create_sample_names()


    def create_sample_names(self):
        """Return a list of unique configuration names"""
        
        filenames = []
        for row in self.samples:
            #  compute hash for each sample and truncate to 8 digits
            row_hash = hashlib.sha1(row.tobytes()).hexdigest()[:8].upper()
            
            # re-truncate hash if there is a collision
            i = 1
            while row_hash in filenames:
                row_hash = hashlib.sha1(row.tobytes()).hexdigest()[i:8+i].upper()

            filenames.append(row_hash)

        self.sample_names = filenames

    def export(self, project_name : str, export_folder):
        """
        Takes the numpy array of samples from LHS and exports to Excel in a format that SolidWorks can import directly.
        Also exports a JSON file for each configuration with its specified parameters
        """
        # Remove whitespace from project name
        project_file_name = project_name.strip().replace(' ', '_').lower()

        filename = f"{project_file_name}_design_table.xlsx"
        file_path = f"{export_folder}\\{filename}"

        # IMPORTANT: Modify parameter names to start with $VALUE@ and end with @EQUATIONS so SW recognizes that they are global variables
        # TODO: Possibly remove this feature if we want to drive dimensions that are not global variables
        # since this considers every parameter as a global variable

        global_variables = [f"$VALUE@{parameter}@EQUATIONS" for parameter in self.param_names]
        # make sample/config data into dataframe
        df = pd.DataFrame(self.samples, columns=global_variables, index=self.sample_names)

        # insert first column for config names
        df.insert(0, "", self.sample_names)        

        df.to_excel(file_path, index=False, startrow=1)

        # rename the first column to "Name" for json
        df = df.rename(columns={"": "Name"})

        # save each row as a JSON file
        for sample in self.sample_names:
            row = df.loc[sample]
            json_path = f"{export_folder}\\{sample}.json"
            row.to_json(json_path)

        print(f"Saved results to {file_path}")
